<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>javascript on Lazy Snack</title>
    <link>https://ysjune.github.io/categories/javascript/</link>
    <description>Recent content in javascript on Lazy Snack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>windsyou@gmail.com (snack)</managingEditor>
    <webMaster>windsyou@gmail.com (snack)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 02 Feb 2020 16:43:07 +0900</lastBuildDate>
    
        <atom:link href="https://ysjune.github.io/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>22. 고급테크닉</title>
        <link>https://ysjune.github.io/posts/javascript/chapter22/advanced_technique/</link>
        <pubDate>Sun, 02 Feb 2020 16:43:07 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 02 Feb 2020 16:43:07 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/chapter22/advanced_technique/</guid>
        <description>다루는 내용 고급 함수 쉽게 조작할 수 없는 객체 타이머 조작 커스텀 이벤트 1. 고급 함수 단순한 절차적인 방식, 복잡하고 동적인 방식, 클로저, 함수 포인터 등을 사용하는</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>자바스크립트 프로그래밍</category>
            
          
        
      </item>
      
      <item>
        <title>17. 에러 처리와 디버깅</title>
        <link>https://ysjune.github.io/posts/javascript/chapter17/error_debug/</link>
        <pubDate>Sun, 19 Jan 2020 15:20:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 19 Jan 2020 15:20:37 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/chapter17/error_debug/</guid>
        <description>다루는 내용 브라우저의 에러 보고에 대한 이해 에러 처리 자바스크립트 코드 디버그 1. 브라우저의 에러 보고에 대한 이해 주요 웹 브라우저는 자바스크립트 에러를 사용자에</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>자바스크립트 프로그래밍</category>
            
          
        
      </item>
      
      <item>
        <title>13. 이벤트</title>
        <link>https://ysjune.github.io/posts/javascript/chapter13/event/</link>
        <pubDate>Sun, 12 Jan 2020 15:08:17 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 12 Jan 2020 15:08:17 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/chapter13/event/</guid>
        <description>다루는 내용 이벤트 흐름에 대한 이해 이벤트 핸들러 다루기 여러 가지 타입의 이벤트 메모리와 성능 1. 이벤트 흐름에 대한 이해 자바스크립트와 HTML 의 상호작용은 문서나 브라</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>자바스크립트 프로그래밍</category>
            
          
        
      </item>
      
      <item>
        <title>11. DOM 확장</title>
        <link>https://ysjune.github.io/posts/javascript/chapter11/dom-extension/</link>
        <pubDate>Sat, 04 Jan 2020 22:53:51 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sat, 04 Jan 2020 22:53:51 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/chapter11/dom-extension/</guid>
        <description>다루는 내용 선택자 API 에 대한 이해 HTML5 DOM 확장 사용 브라우저 전용 DOM 확장 사용 1. 선택자 API CSS 선택자로 패턴을 만들고 그에 맞는 DOM 요소를 선택하는 능력 (Ex. jQuery) 1-1 querySelector() CSS 쿼리를 받</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>자바스크립트 프로그래밍</category>
            
          
        
      </item>
      
      <item>
        <title>10. DOM</title>
        <link>https://ysjune.github.io/posts/javascript/chapter10/dom/</link>
        <pubDate>Sun, 29 Dec 2019 12:55:43 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 29 Dec 2019 12:55:43 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/chapter10/dom/</guid>
        <description>DOM 을 노드의 계층 구조로 이해 다양한 노드 타입 브라우저들 간의 비호환성을 우회하는 DOM 코딩 1. 노드의 계층 구조 HTML 과 XML 문서는 모두 DOM 을 통해 노드의 계층 구조로 표현 가능</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>자바스크립트 프로그래밍</category>
            
          
        
      </item>
      
      <item>
        <title>8. 브라우저 객체 모델</title>
        <link>https://ysjune.github.io/posts/javascript/chapter8/bom/</link>
        <pubDate>Mon, 16 Dec 2019 23:25:39 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Mon, 16 Dec 2019 23:25:39 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/chapter8/bom/</guid>
        <description>다루는 내용 BOM 의 핵심인 window 객체에 대한 이해 창과 프레임, 팝업 컨트롤 location 객체에서 얻는 페이지 정보 navigator 객체를 통한 브라우저 이해 1. window 객체 웹페이지에서 정의한 모든 객체</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>자바스크립트 프로그래밍</category>
            
          
        
      </item>
      
      <item>
        <title>7. 함수 표현식</title>
        <link>https://ysjune.github.io/posts/javascript/chapter7/function/</link>
        <pubDate>Sun, 08 Dec 2019 13:24:59 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 13:24:59 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/chapter7/function/</guid>
        <description>다루는 내용 함수 표현식의 특징 함수와 재귀 클로저를 이용한 고유(프라이빗) 변수 1. 함수 표현식의 특징 함수를 정의하는 방법은 함수 선언과 함수 표현식 2가지가 있음</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>자바스크립트 프로그래밍</category>
            
          
        
      </item>
      
      <item>
        <title>2. HTML 속의 자바스크립트</title>
        <link>https://ysjune.github.io/posts/javascript/chapter2/chapter2/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 01:52:37 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/chapter2/chapter2/</guid>
        <description>다루는 내용 &amp;lt;script&amp;gt; 요소 사용 인라인 스크립트와 외부 스크립트의 비교 문서 모드가 자바스크립트에 미치는 영향 자바스크립트가 비활성화된 상황에 대한 대비 1. &amp;lt;Script&amp;gt; 요소 여섯가</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>자바스크립트 프로그래밍</category>
            
          
        
      </item>
      
      <item>
        <title>3. 언어의 기초</title>
        <link>https://ysjune.github.io/posts/javascript/chapter3/basic_of_language/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 01:52:37 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/chapter3/basic_of_language/</guid>
        <description>다루는 내용 문법 데이터 타입 제어문 함수 1. 문법 대소문자를 구분 식별자 -&amp;gt; 변수, 함수, 프로퍼티, 함수 매개변수의 이름으로 관습적으로 카멜 케이스를 사용 camelCase 스트릭</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>자바스크립트 프로그래밍</category>
            
          
        
      </item>
      
      <item>
        <title>4. 변수, 스코프, 메모리</title>
        <link>https://ysjune.github.io/posts/javascript/chapter4/variable_scope_memory/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 01:52:37 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/chapter4/variable_scope_memory/</guid>
        <description>다루는 내용 변수의 원시값과 참조값 실행 컨텍스트의 이해 가비지 컬렉션의 이해 1. 원시값과 참조값 원시값은 기본타입(문자열, null, undefined etc), 참조값은 메모리에 저장된 객체</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>자바스크립트 프로그래밍</category>
            
          
        
      </item>
      
      <item>
        <title>5. 참조 타입</title>
        <link>https://ysjune.github.io/posts/javascript/chapter5/reference_type/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 01:52:37 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/chapter5/reference_type/</guid>
        <description>다루는 내용 객체로 작업하기 배열 생성하고 조작하기 자바스크립트의 데이터 타입 이해 원시 데이터 및 원시 래퍼로 작업하기 1. 객체로 작업하기 객체란 참조 타입이며 클래</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>자바스크립트 프로그래밍</category>
            
          
        
      </item>
      
      <item>
        <title>6. 객체 지향 프로그래밍</title>
        <link>https://ysjune.github.io/posts/javascript/chapter6/object_oriented/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 01:52:37 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/chapter6/object_oriented/</guid>
        <description>다루는 내용 객체 프로퍼티의 이해 객체의 이해와 생성 상속의 이해 1. 객체 프로퍼티의 이해 객체는 특별한 순서가 없는 값의 배열 (key-value 쌍의 그룹) 가장 단순한 방법은 1 2 3 4</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
              <category>자바스크립트 프로그래밍</category>
            
          
        
      </item>
      
      <item>
        <title>Apply,Call,Bind 에 대해</title>
        <link>https://ysjune.github.io/posts/javascript/etc/apply_call_bind/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 01:52:37 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/etc/apply_call_bind/</guid>
        <description>apply, call, bind 서버 사이드인 java 의 this 와 javascript 의 this 가 헷갈리는 부분이 많은데, this 와 관련된 내용인 call, apply, bind 에 대한 내용이 5장(참조 타입) 에 나와 이 부분은 따로 정리해보고자 한다</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Object.assign 에 대해</title>
        <link>https://ysjune.github.io/posts/javascript/etc/object.assign/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 01:52:37 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/javascript/etc/object.assign/</guid>
        <description>자바스크립트 4장에서 객체 복사에 대한 내용을 다루다가 Object.assign() 을 통해 복사가 가능하다는 얘기를 잠깐 했었는데, 자세히 모르니 이번 기회에 짚고 넘어가보자 Object.assign() 우선 MDN 에서</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>javascript</category>
            
          
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>