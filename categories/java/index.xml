<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>JAVA on Lazy Snack</title>
    <link>https://ysjune.github.io/categories/java/</link>
    <description>Recent content in JAVA on Lazy Snack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>windsyou@gmail.com (snack)</managingEditor>
    <webMaster>windsyou@gmail.com (snack)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 22 Jan 2021 20:28:23 +0900</lastBuildDate>
    
        <atom:link href="https://ysjune.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>JPA 락에 대해</title>
        <link>https://ysjune.github.io/posts/java/jpa_lock/</link>
        <pubDate>Fri, 22 Jan 2021 20:28:23 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Fri, 22 Jan 2021 20:28:23 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/jpa_lock/</guid>
        <description>트랜잭션에 대해서 이야기 하다보면은 항상 나오는 얘기가 있는 것 같습니다. 대량의 트래픽이 한 번에 들어왔을 때 어떻게 줄을 세울 것인가? 물론 아닐 수도 있지만, 면접</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>JAVA</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>orElse 와 orElseGet 무슨 차이가 있을까?</title>
        <link>https://ysjune.github.io/posts/java/orelsenorelseget/</link>
        <pubDate>Thu, 24 Dec 2020 18:38:51 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Thu, 24 Dec 2020 18:38:51 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/orelsenorelseget/</guid>
        <description>Java 8을 쓰면서 null 에 대한 처리를 위해서 Optional 을 많이 쓸 텐데요. 저도 꽤 즐겨 쓰는 편입니다. (보통 null 을 반환하는 로직을 짜고 싶지 않겠지만, 그게 항상 마음대로 되지는 않</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>JAVA</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Mockito 정리 (1)</title>
        <link>https://ysjune.github.io/posts/java/mockito_1/</link>
        <pubDate>Sun, 29 Mar 2020 23:25:19 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 29 Mar 2020 23:25:19 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/mockito_1/</guid>
        <description>Mockito 란? 자바에서 단위 테스트를 위한 Mocking framework tastes really good(?!) (개인적으론) 간편하게 사용할 수 있어서 테스트코드 작성할 때 즐겨 사용하는 편입니다. 1. 의존성 추가 1 2 3 4 5 6</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>JAVA</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>SpringBoot Actuator</title>
        <link>https://ysjune.github.io/posts/java/springboot_actuator/</link>
        <pubDate>Wed, 12 Feb 2020 23:26:47 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Wed, 12 Feb 2020 23:26:47 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/springboot_actuator/</guid>
        <description>1. Spring Boot Actuator 일단.. 생소한Actuator 이란?? An actuator is a manufacturing term that refers to a mechanical device for moving or controlling something. Actuators can generate a large amount of motion from a small change. 물건을 움직이거나 컨트롤하기 위한 장치를</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>JAVA</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>eventPublisher 와 eventListenr 사용</title>
        <link>https://ysjune.github.io/posts/java/eventlistener/</link>
        <pubDate>Tue, 11 Feb 2020 22:27:00 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Tue, 11 Feb 2020 22:27:00 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/eventlistener/</guid>
        <description>서론 최근 마이크로미터를 사용하여 해당 서비스의 접속 카운트를 표시할까 해봤다. (오로지 흥미 위주로..) 처음에는 MeterRegistry 와 Counter 를 직접 사용하여 해당 메소드에 추가해</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>JAVA</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>JPA 어노테이션</title>
        <link>https://ysjune.github.io/posts/java/jpa_annotation/</link>
        <pubDate>Fri, 10 Jan 2020 18:52:51 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Fri, 10 Jan 2020 18:52:51 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/jpa_annotation/</guid>
        <description>1. NotFound org.hibernate.annotations 에 포함되어 있음 @JoinColumn 등으로 조인을 했을 시, 조인한 테이블의 값이 null 일 경우 EntityNotFoundException 이 발생하는데, 이럴 경우 1 2 3 @JoinColumn(&amp;#34;dto_id&amp;#34;) @NotFound(action = NotFoundAction.IGNORE) private DTO dto; 을 해주면 Exception 이 발생하지 않음. Ignore,</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>java</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>캡슐화(encapsulation)</title>
        <link>https://ysjune.github.io/posts/java/encapsulation/</link>
        <pubDate>Tue, 17 Dec 2019 13:32:07 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Tue, 17 Dec 2019 13:32:07 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/encapsulation/</guid>
        <description>캡슐화(encapsulation) 객체가 내부적으로 기능을 어떻게 구현하는지를 감추는 것 내부의 기능 구현이 변경되더라도 그 기능을 사용하는 코드는 영향을</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>JAVA</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Caffeine(캐시 라이브러리) 사용</title>
        <link>https://ysjune.github.io/posts/java/caffeine/</link>
        <pubDate>Mon, 09 Dec 2019 18:36:11 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Mon, 09 Dec 2019 18:36:11 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/caffeine/</guid>
        <description>이번에 회사에서 학습기에 들어가는 화면에 대한 관리를 하는데, 자주 바뀌는 사항이 아니다보니, 캐쉬를 적용하자는 말이 나왔다. 캐시라고 하면 레디스(redis</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>JAVA</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>SimpleJdbcInsert 문제</title>
        <link>https://ysjune.github.io/posts/java/simplejdbcinsert_problem/</link>
        <pubDate>Mon, 09 Dec 2019 17:39:01 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Mon, 09 Dec 2019 17:39:01 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/simplejdbcinsert_problem/</guid>
        <description>이전 jdbcTemplate 를 설명하면서 simpleJdbcInsert 에 대한 칭찬(?)을 했었다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @Override public Long saveLoginUI(final LoginVO loginVO) { KeyHolder keyHolder = new GeneratedKeyHolder(); jdbcTemplate.update(new PreparedStatementCreator() { @Override public PreparedStatement createPreparedStatement(final Connection connection) throws SQLException { PreparedStatement</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>JAVA</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>DB Insert 시 자동생성된 id 를 알아내기</title>
        <link>https://ysjune.github.io/posts/java/db_insert_id_retrun/</link>
        <pubDate>Sun, 08 Dec 2019 01:30:33 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 01:30:33 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/db_insert_id_retrun/</guid>
        <description>DB Insert 시 자동생성된 id 를 알아내기 1.Mybatis 1 2 3 4 5 6 7 8 9 10 11 &amp;lt;insert id=&amp;#34;insertStudent&amp;#34; parameterType=&amp;#34;studentDto&amp;#34; useGeneratedKeys=&amp;#34;true&amp;#34; keyProperty=&amp;#34;id&amp;#34;&amp;gt; INSERT INTO student ( name, grade, phone ) VALUES ( #{name}, #{grade}, #{phone} ) 사용하는 데이터베이스가 Auto Increment 가 된다면 (e.g. MySQL, Maria) 다음을 통해</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>java</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Feign 사용 (1)</title>
        <link>https://ysjune.github.io/posts/java/feign1/</link>
        <pubDate>Sun, 08 Dec 2019 01:30:33 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 01:30:33 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/feign1/</guid>
        <description>이번 API 통신을 하면서 Feign 을 사용해봤는데, 어떻게 사용했는지 적어보고자 함. Feign 이란? Java to HTTP client binder Netflix 에서 개발함 https://github.com/OpenFeign/feign 이라고 간단하게만, API 통신을 이용해서 개발할 필</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>java</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Feign 사용 (2)</title>
        <link>https://ysjune.github.io/posts/java/feign2/</link>
        <pubDate>Sun, 08 Dec 2019 01:30:33 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 01:30:33 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/feign2/</guid>
        <description>Circuit Breaker 적용 API 통신에서 서킷 브레이커를 적용해야 한다는 얘기를 들었고, 이 역시 처음 듣는 용어라 일단 이해를 위해.. Circuit Breaker 란? 회로차단기로 불리며, 전기적 회로를 과</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>java</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>HandlerMethodArgumentResolver 사용</title>
        <link>https://ysjune.github.io/posts/java/handlermethodargumentresolver/</link>
        <pubDate>Sun, 08 Dec 2019 01:30:33 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 01:30:33 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/handlermethodargumentresolver/</guid>
        <description>이전에 회사에서 다른 프로젝트 소스를 보다가 http 헤더에서 보낸 정보를 controller 단에서 바로 vo 로 매핑해주는 코드를 발견했다. 당시에 이거 꽤 유용하게 쓸 수 있겠네. 하고 지나</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>java</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>WireMock 사용</title>
        <link>https://ysjune.github.io/posts/java/wiremock/</link>
        <pubDate>Sun, 08 Dec 2019 01:30:33 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <atom:modified>Sun, 08 Dec 2019 01:30:33 +0900</atom:modified>
        <guid>https://ysjune.github.io/posts/java/wiremock/</guid>
        <description>순서가 어긋난 감이 있긴 하지만, 지난 번 API 통신을 위해 Feign 을 사용했었는데, 테스트를 진행할 때 실제로 API 접속을 할 수는 없으니 Mock Web 서버를 만드는 기술인 WireMock 를 사용한 내</description>
        
        <dc:creator>snack</dc:creator>
        
        
        
        
        
          
            
              <category>java</category>
            
          
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>