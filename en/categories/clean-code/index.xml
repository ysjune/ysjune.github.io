<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clean code on Lazy Snack</title>
    <link>http://ysjune.github.io/en/categories/clean-code/</link>
    <description>Recent content in clean code on Lazy Snack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>windsyou@gmail.com (snack)</managingEditor>
    <webMaster>windsyou@gmail.com (snack)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sat, 07 Dec 2019 13:49:32 +0900</lastBuildDate>
    
        <atom:link href="http://ysjune.github.io/en/categories/clean-code/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>1. 깨끗한 코드</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter1/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter1/</guid>
        <description>1. 깨끗한 코드 코드가 존재하리라 어느 수준에 이르면 코드의 도움 없이 요구사항을 상세하게 표현하기란 불가능 하기에 코드가 사라질 가망은 없다. 궁극적으로 코드는 요</description>
      </item>
      
      <item>
        <title>10. 클래스</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter10/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter10/</guid>
        <description>10. 클래스 클래스 체계 공개에서 비공개 형식으로 진행되어 추상화 단계가 순차적으로 내려간다. 캡슐화 변수와 유틸리티 함수는 가능한 공개하지 않는 편이 낫지만 반드시</description>
      </item>
      
      <item>
        <title>11. 시스템</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter11/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter11/</guid>
        <description>11. 시스템 시스템 제작과 시스템 사용을 분리하라 제작과 사용은 다르다. 체계적이고 탄탄한 시스템을 만들고 싶다면 흔히 쓰는 손쉬운 기법으로 무듈성을 깨서는 안된다.</description>
      </item>
      
      <item>
        <title>12. 창발성</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter12/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter12/</guid>
        <description>12. 창발성 창발적 설계로 깔끔한 코드를 구현하자 켄트 벡이 제시한 단순한 설계 규칙 4가지 모든 테스트를 실행하라 무엇보다도 먼저 설계는 의도한 대로 돌아가는 시스템을</description>
      </item>
      
      <item>
        <title>13. 동시성</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter13/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter13/</guid>
        <description>13. 동시성 동시성이 필요한 이유? 동시성은 커플링(결합)을 없애는 전략이다, 즉 무엇과 언제를 분리하는 전략이다 단일 스레드의 경우 호출 스택을 살펴보면 프로그램</description>
      </item>
      
      <item>
        <title>2. 의미 있는 이름</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter2/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter2/</guid>
        <description>2. 의미 있는 이름 의도를 분명히 밝혀라 로직이 간단한 것보단, 이름이 간단 명료한 것이 좋다. 그릇된 정보를 피하라 유사한 개념은 유사한 표기법을 사용한다. 일관성이</description>
      </item>
      
      <item>
        <title>3. 함수</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter3/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter3/</guid>
        <description>3. 함수 작게 만들어라 중첩 구조가 생길만큼 함수가 커져서는 안된다는 뜻이다. 함수에서 들여쓰기 수준은 1단이나 2단을 넘어서면 안 된다. 당연한 말이지만, 그래야</description>
      </item>
      
      <item>
        <title>4. 주석</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter4/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter4/</guid>
        <description>4. 주석 나쁜 코드에 주석을 달지 마라. 새로 짜라 주석은 나쁜 코드를 보완하지 못한다. 코드에 주석을 추가하는 일반적인 이유는 코드 품질이 나쁘기 때문이다. 주석을 달</description>
      </item>
      
      <item>
        <title>5. 형식 맞추기</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter5/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter5/</guid>
        <description>5. 형식 맞추기 형식을 맞추는 목적 오늘 구현한 기능이 다음 버전에서 바뀔 확률은 매우 높다. 그리고 오늘 구현한 코드의 가독성은 앞으로 바뀔 코드의 품질에 지대한 영향을</description>
      </item>
      
      <item>
        <title>6. 객체와 자료 구조</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter6/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter6/</guid>
        <description>6. 객체와 자료 구조 자료 추상화 자료를 세세하게 공개하기보다는 추상적인 개념으로 표현하는 것이 좋다. 인터페이스나 조회/설정 함수만으로는 추상화가 이뤄지지 않</description>
      </item>
      
      <item>
        <title>7. 오류 처리</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter7/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter7/</guid>
        <description>7. 오류 처리 오류 코드보다 예외를 사용하라 오류 처리 코드와 호출하여 논리를 진행하는 코드가 섞이면 알아보기가 어렵다. 논리가 뒤섞여 있기 때문. try/catch/finally 문부터 작성하라</description>
      </item>
      
      <item>
        <title>8. 경계</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter8/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter8/</guid>
        <description>8. 경계 외부 코드 사용하기 인터페이스 제공자와 인터페이스 사용자 사이에는 특유의 경계가 존재한다. 제공자는 사용성을 높이기 위해 많은 영역에서 지원하려고 하고,</description>
      </item>
      
      <item>
        <title>9. 단위 테스트</title>
        <link>http://ysjune.github.io/en/posts/clean-code/chapter9/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>http://ysjune.github.io/en/posts/clean-code/chapter9/</guid>
        <description>9. 단위 테스트 TDD 의 법칙 3가지 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다. 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트</description>
      </item>
      
    
  </channel>
</rss>