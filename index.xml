<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lazy Snack</title>
    <link>https://ysjune.github.io/</link>
    <description>Recent content on Lazy Snack</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>windsyou@gmail.com (snack)</managingEditor>
    <webMaster>windsyou@gmail.com (snack)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 12 Jan 2020 15:08:17 +0900</lastBuildDate>
    
        <atom:link href="https://ysjune.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>13. 이벤트</title>
        <link>https://ysjune.github.io/posts/javascript/chapter13/event/</link>
        <pubDate>Sun, 12 Jan 2020 15:08:17 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/javascript/chapter13/event/</guid>
        <description>다루는 내용 이벤트 흐름에 대한 이해 이벤트 핸들러 다루기 여러 가지 타입의 이벤트 메모리와 성능 1. 이벤트 흐름에 대한 이</description>
      </item>
      
      <item>
        <title>JPA 어노테이션</title>
        <link>https://ysjune.github.io/posts/java/jpa_annotation/</link>
        <pubDate>Fri, 10 Jan 2020 18:52:51 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/java/jpa_annotation/</guid>
        <description>1. NotFound org.hibernate.annotations 에 포함되어 있음 @JoinColumn 등으로 조인을 했을 시, 조인한 테이블의 값이 null 일 경우 EntityNotFoundException 이 발생하는데, 이럴 경우 1 2 3 @JoinColumn(&amp;#34;dto_id&amp;#34;)</description>
      </item>
      
      <item>
        <title>11. DOM 확장</title>
        <link>https://ysjune.github.io/posts/javascript/chapter11/dom-extension/</link>
        <pubDate>Sat, 04 Jan 2020 22:53:51 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/javascript/chapter11/dom-extension/</guid>
        <description>다루는 내용 선택자 API 에 대한 이해 HTML5 DOM 확장 사용 브라우저 전용 DOM 확장 사용 1. 선택자 API CSS 선택자로 패턴을 만들고 그에 맞</description>
      </item>
      
      <item>
        <title>10. DOM</title>
        <link>https://ysjune.github.io/posts/javascript/chapter10/dom/</link>
        <pubDate>Sun, 29 Dec 2019 12:55:43 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/javascript/chapter10/dom/</guid>
        <description>DOM 을 노드의 계층 구조로 이해 다양한 노드 타입 브라우저들 간의 비호환성을 우회하는 DOM 코딩 1. 노드의 계층 구조 HTML 과 XML 문</description>
      </item>
      
      <item>
        <title>2019년 회고</title>
        <link>https://ysjune.github.io/posts/chatter/2019retrospect/</link>
        <pubDate>Tue, 24 Dec 2019 23:24:28 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/chatter/2019retrospect/</guid>
        <description>이전에는 생각만 하고 남겨뒀던 것들을 블로그를 만들고 나니 써봐야 겠다는 생각이 들었다. 그렇게 하여 이번에는 201</description>
      </item>
      
      <item>
        <title>캡슐화(encapsulation)</title>
        <link>https://ysjune.github.io/posts/java/encapsulation/</link>
        <pubDate>Tue, 17 Dec 2019 13:32:07 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/java/encapsulation/</guid>
        <description>캡슐화(encapsulation) 객체가 내부적으로 기능을 어떻게 구현하는지를 감추는 것 내부의 기능 구현이</description>
      </item>
      
      <item>
        <title>8. 브라우저 객체 모델</title>
        <link>https://ysjune.github.io/posts/javascript/chapter8/bom/</link>
        <pubDate>Mon, 16 Dec 2019 23:25:39 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/javascript/chapter8/bom/</guid>
        <description>다루는 내용 BOM 의 핵심인 window 객체에 대한 이해 창과 프레임, 팝업 컨트롤 location 객체에서 얻는 페이지 정보 navigator 객체를 통한 브라우</description>
      </item>
      
      <item>
        <title>Caffeine(캐시 라이브러리) 사용</title>
        <link>https://ysjune.github.io/posts/java/caffeine/</link>
        <pubDate>Mon, 09 Dec 2019 18:36:11 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/java/caffeine/</guid>
        <description>이번에 회사에서 학습기에 들어가는 화면에 대한 관리를 하는데, 자주 바뀌는 사항이 아니다보니, 캐쉬를 적용하자는 말</description>
      </item>
      
      <item>
        <title>SimpleJdbcInsert 문제</title>
        <link>https://ysjune.github.io/posts/java/simplejdbcinsert_problem/</link>
        <pubDate>Mon, 09 Dec 2019 17:39:01 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/java/simplejdbcinsert_problem/</guid>
        <description>이전 jdbcTemplate 를 설명하면서 simpleJdbcInsert 에 대한 칭찬(?)을 했었다. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 @Override public Long saveLoginUI(final LoginVO</description>
      </item>
      
      <item>
        <title>7. 함수 표현식</title>
        <link>https://ysjune.github.io/posts/javascript/chapter7/function/</link>
        <pubDate>Sun, 08 Dec 2019 13:24:59 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/javascript/chapter7/function/</guid>
        <description>다루는 내용 함수 표현식의 특징 함수와 재귀 클로저를 이용한 고유(프라이빗) 변수 1. 함수 표현식의 특징 함수를 정의하</description>
      </item>
      
      <item>
        <title>2. HTML 속의 자바스크립트</title>
        <link>https://ysjune.github.io/posts/javascript/chapter2/chapter2/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/javascript/chapter2/chapter2/</guid>
        <description>다루는 내용 &amp;lt;script&amp;gt; 요소 사용 인라인 스크립트와 외부 스크립트의 비교 문서 모드가 자바스크립트에 미치는 영향 자바스크립트</description>
      </item>
      
      <item>
        <title>3. 언어의 기초</title>
        <link>https://ysjune.github.io/posts/javascript/chapter3/basic_of_language/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/javascript/chapter3/basic_of_language/</guid>
        <description>다루는 내용 문법 데이터 타입 제어문 함수 1. 문법 대소문자를 구분 식별자 -&amp;gt; 변수, 함수, 프로퍼티, 함수 매개변수의 이</description>
      </item>
      
      <item>
        <title>4. 변수, 스코프, 메모리</title>
        <link>https://ysjune.github.io/posts/javascript/chapter4/variable_scope_memory/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/javascript/chapter4/variable_scope_memory/</guid>
        <description>다루는 내용 변수의 원시값과 참조값 실행 컨텍스트의 이해 가비지 컬렉션의 이해 1. 원시값과 참조값 원시값은 기본타입(</description>
      </item>
      
      <item>
        <title>5. 참조 타입</title>
        <link>https://ysjune.github.io/posts/javascript/chapter5/reference_type/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/javascript/chapter5/reference_type/</guid>
        <description>다루는 내용 객체로 작업하기 배열 생성하고 조작하기 자바스크립트의 데이터 타입 이해 원시 데이터 및 원시 래퍼로 작업하</description>
      </item>
      
      <item>
        <title>6. 객체 지향 프로그래밍</title>
        <link>https://ysjune.github.io/posts/javascript/chapter6/object_oriented/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/javascript/chapter6/object_oriented/</guid>
        <description>다루는 내용 객체 프로퍼티의 이해 객체의 이해와 생성 상속의 이해 1. 객체 프로퍼티의 이해 객체는 특별한 순서가 없는 값의</description>
      </item>
      
      <item>
        <title>Apply,Call,Bind 에 대해</title>
        <link>https://ysjune.github.io/posts/javascript/etc/apply_call_bind/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/javascript/etc/apply_call_bind/</guid>
        <description>apply, call, bind 서버 사이드인 java 의 this 와 javascript 의 this 가 헷갈리는 부분이 많은데, this 와 관련된 내용인 call, apply, bind 에 대한 내용이 5장(참조</description>
      </item>
      
      <item>
        <title>Object.assign 에 대해</title>
        <link>https://ysjune.github.io/posts/javascript/etc/object.assign/</link>
        <pubDate>Sun, 08 Dec 2019 01:52:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/javascript/etc/object.assign/</guid>
        <description>자바스크립트 4장에서 객체 복사에 대한 내용을 다루다가 Object.assign() 을 통해 복사가 가능하다는 얘기를 잠깐 했었는데, 자세히 모</description>
      </item>
      
      <item>
        <title>Aggregate, Value</title>
        <link>https://ysjune.github.io/posts/model/2019_6_3/</link>
        <pubDate>Sun, 08 Dec 2019 01:45:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/model/2019_6_3/</guid>
        <description>중요한 도메인 로직은 도메인으로 하자. Service Layer 에 set 메소드가 있으면 일단 의심 -&amp;gt; 이 부분을 도메인 영역으로 변경할 수 있도</description>
      </item>
      
      <item>
        <title>What-How 에 대해 (1)</title>
        <link>https://ysjune.github.io/posts/model/2019_6_5/</link>
        <pubDate>Sun, 08 Dec 2019 01:45:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/model/2019_6_5/</guid>
        <description>What - How 에 대해 What 상위 수준의 개념적인? 그런 느낌의 말 Ex) 좌회전을 한다. How 실제로 어떻게 했는가? 에 대한 What 에 대한 대</description>
      </item>
      
      <item>
        <title>What-How 에 대해 (2)</title>
        <link>https://ysjune.github.io/posts/model/2019_6_12/</link>
        <pubDate>Sun, 08 Dec 2019 01:45:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/model/2019_6_12/</guid>
        <description>What - How (2) What 이란 개념적인 용어로 설명? 해야한다. hasCardBoard() 이런걸로 만들면 How의 연장선상이 될 수 있음 (이 부분이 들으</description>
      </item>
      
      <item>
        <title>기능, 역할, 책임</title>
        <link>https://ysjune.github.io/posts/model/2019_5_24/</link>
        <pubDate>Sun, 08 Dec 2019 01:45:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/model/2019_5_24/</guid>
        <description>회사에서 진행하는 모델에 관한 세미나를 듣고 내용을 정리하고자 함. (1시간 가량 진행) 중간중간 개인 의견 들어갈 수</description>
      </item>
      
      <item>
        <title>모델</title>
        <link>https://ysjune.github.io/posts/model/2019_5_29/</link>
        <pubDate>Sun, 08 Dec 2019 01:45:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/model/2019_5_29/</guid>
        <description>Model user - 상호작용(UI) -&amp;gt; 로직(Service) &amp;lt;-&amp;gt; 인프라 (DB, 메일등) 으로 구성되어 있다고 했을 때, 로직 &amp;lt;-&amp;gt; 인프</description>
      </item>
      
      <item>
        <title>1장. 컴슈터 시스템 개요</title>
        <link>https://ysjune.github.io/posts/linux/book/chapter1/</link>
        <pubDate>Sun, 08 Dec 2019 01:35:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/linux/book/chapter1/</guid>
        <description>애플리케이션 : 사용자가 직접 사용, 컴퓨터의 오피스 프로그램 또는 스마트폰 앱등 미틀웨어 : 여러 애플리케이션이 공</description>
      </item>
      
      <item>
        <title>2장. 사용자모드로 구현되는 기능</title>
        <link>https://ysjune.github.io/posts/linux/book/chapter2/</link>
        <pubDate>Sun, 08 Dec 2019 01:35:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/linux/book/chapter2/</guid>
        <description>OS는 커널 이외에도 사용자 모드에서 동작하는 다양한 프로그램으로 구성 라이브러리 형태, 단독 프로그램으로 동작 이</description>
      </item>
      
      <item>
        <title>3장. 프로세스 관리</title>
        <link>https://ysjune.github.io/posts/linux/book/chapter3/</link>
        <pubDate>Sun, 08 Dec 2019 01:35:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/linux/book/chapter3/</guid>
        <description>가상 기억장치가 없는 단순한 경우만 나타낸다. 실제 프로세스의 생성 및 삭제는 5장에서 자세히 다룸 프로세스 생성의 목</description>
      </item>
      
      <item>
        <title>4장. 프로세스 스케쥴러</title>
        <link>https://ysjune.github.io/posts/linux/book/chapter4/</link>
        <pubDate>Sun, 08 Dec 2019 01:35:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/linux/book/chapter4/</guid>
        <description>프로세스 스케줄러 여러 프로그램을 동시에 동작 시킴 (정확히는 동시에 동작하는 것처럼 보이게 함) 하나의 CPU는 동</description>
      </item>
      
      <item>
        <title>6장. 메모리 계층</title>
        <link>https://ysjune.github.io/posts/linux/book/chapter6/</link>
        <pubDate>Sun, 08 Dec 2019 01:35:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/linux/book/chapter6/</guid>
        <description>구체적으로 크기와 성능에 얼마나 차이가 있습니까? 이런 차이를 고려하여 하드웨어나 리눅스는 어떤 구조로 되어 있습니</description>
      </item>
      
      <item>
        <title>Link</title>
        <link>https://ysjune.github.io/posts/linux/command/link/</link>
        <pubDate>Sun, 08 Dec 2019 01:35:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/linux/command/link/</guid>
        <description>리눅스 Ln ln 은 Link 의 약자, 리눅스에서 링크파일을 만드는 명령어로 하드링크와 심볼릭 링크 2가지가 존재 1. 하드 링크 (Hard</description>
      </item>
      
      <item>
        <title>파일명 변경</title>
        <link>https://ysjune.github.io/posts/linux/command/mv/</link>
        <pubDate>Sun, 08 Dec 2019 01:35:37 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/linux/command/mv/</guid>
        <description>리눅스 파일명 혹은 디렉토리 명 변경 리눅스 파일명을 변경하는 것인데, 심볼릭 링크로 링크를 건 후 해당 파일 혹은 디렉토</description>
      </item>
      
      <item>
        <title>DB Insert 시 자동생성된 id 를 알아내기</title>
        <link>https://ysjune.github.io/posts/java/db_insert_id_retrun/</link>
        <pubDate>Sun, 08 Dec 2019 01:30:33 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/java/db_insert_id_retrun/</guid>
        <description>DB Insert 시 자동생성된 id 를 알아내기 1.Mybatis 1 2 3 4 5 6 7 8 9 10 11 &amp;lt;insert id=&amp;#34;insertStudent&amp;#34; parameterType=&amp;#34;studentDto&amp;#34; useGeneratedKeys=&amp;#34;true&amp;#34; keyProperty=&amp;#34;id&amp;#34;&amp;gt; INSERT INTO student ( name, grade, phone ) VALUES ( #{name}, #{grade}, #{phone} ) 사용하는 데</description>
      </item>
      
      <item>
        <title>Feign 사용 (1)</title>
        <link>https://ysjune.github.io/posts/java/feign1/</link>
        <pubDate>Sun, 08 Dec 2019 01:30:33 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/java/feign1/</guid>
        <description>이번 API 통신을 하면서 Feign 을 사용해봤는데, 어떻게 사용했는지 적어보고자 함. Feign 이란? Java to HTTP client binder Netflix 에서 개발함 https://github.com/OpenFeign/feign 이</description>
      </item>
      
      <item>
        <title>Feign 사용 (2)</title>
        <link>https://ysjune.github.io/posts/java/feign2/</link>
        <pubDate>Sun, 08 Dec 2019 01:30:33 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/java/feign2/</guid>
        <description>Circuit Breaker 적용 API 통신에서 서킷 브레이커를 적용해야 한다는 얘기를 들었고, 이 역시 처음 듣는 용어라 일단 이해를 위해.. Circuit</description>
      </item>
      
      <item>
        <title>HandlerMethodArgumentResolver 사용</title>
        <link>https://ysjune.github.io/posts/java/handlermethodargumentresolver/</link>
        <pubDate>Sun, 08 Dec 2019 01:30:33 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/java/handlermethodargumentresolver/</guid>
        <description>이전에 회사에서 다른 프로젝트 소스를 보다가 http 헤더에서 보낸 정보를 controller 단에서 바로 vo 로 매핑해주는 코드를 발견했다.</description>
      </item>
      
      <item>
        <title>WireMock 사용</title>
        <link>https://ysjune.github.io/posts/java/wiremock/</link>
        <pubDate>Sun, 08 Dec 2019 01:30:33 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/java/wiremock/</guid>
        <description>순서가 어긋난 감이 있긴 하지만, 지난 번 API 통신을 위해 Feign 을 사용했었는데, 테스트를 진행할 때 실제로 API 접속을 할 수는</description>
      </item>
      
      <item>
        <title>mariaDB 설치 (feat. Docker)</title>
        <link>https://ysjune.github.io/posts/setting/docker/mariadb_setting/</link>
        <pubDate>Sun, 08 Dec 2019 01:16:31 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/setting/docker/mariadb_setting/</guid>
        <description>이상하게 맥에서 로컬 mysql 이든 mariadb든 다 제대로 설치가 안되서, 주변에서 도커로 설치해보라는 얘기를 듣고&amp;</description>
      </item>
      
      <item>
        <title>nGrinder 부하 테스트</title>
        <link>https://ysjune.github.io/posts/setting/setress_test/ngrinder/</link>
        <pubDate>Sun, 08 Dec 2019 01:16:31 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/setting/setress_test/ngrinder/</guid>
        <description>nGrinder 란? Stress Test Platform 테스트 스크립트 작성, 테스트 실행, 대상 서버 모니터링 및 결과 작성 nGrinder Github nGrinder 구조 Controller : 테스팅을 위한 인터</description>
      </item>
      
      <item>
        <title>아파치 설정</title>
        <link>https://ysjune.github.io/posts/setting/apache_dev/apache/</link>
        <pubDate>Sun, 08 Dec 2019 01:16:31 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/setting/apache_dev/apache/</guid>
        <description>이번 개발 서버를 구성하면서 설정했던 것들을 까먹지 않도록 작성. 목표 - QA 용 관리자 서버 구성 필요한 단계 톰캣 설정 아</description>
      </item>
      
      <item>
        <title>HashTable vs HashMap</title>
        <link>https://ysjune.github.io/posts/interview/hashtable-vs-hashmap/</link>
        <pubDate>Sun, 08 Dec 2019 01:11:52 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/interview/hashtable-vs-hashmap/</guid>
        <description>HashTable VS HashMap 메모리 내에 key/value 짝으로 되어있는 데이터이다. 두 데이터 타입의 차이점을 알아보고자 한다. 1. 비슷한 점 추가, 삭</description>
      </item>
      
      <item>
        <title>클래스 vs 인스턴스</title>
        <link>https://ysjune.github.io/posts/interview/class-vs-instance/</link>
        <pubDate>Sun, 08 Dec 2019 01:11:52 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/interview/class-vs-instance/</guid>
        <description>클래스 vs 인스턴스 정말 흔하게 쓰는 단어이고, 사용도 할 줄 알지만 항상 그렇듯, 남에게 제대로 설명하지 못하면 결국은</description>
      </item>
      
      <item>
        <title>1. 깨끗한 코드</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter1/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter1/</guid>
        <description>1. 깨끗한 코드 코드가 존재하리라 어느 수준에 이르면 코드의 도움 없이 요구사항을 상세하게 표현하기란 불가능 하기에 코</description>
      </item>
      
      <item>
        <title>10. 클래스</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter10/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter10/</guid>
        <description>10. 클래스 클래스 체계 공개에서 비공개 형식으로 진행되어 추상화 단계가 순차적으로 내려간다. 캡슐화 변수와 유틸리티</description>
      </item>
      
      <item>
        <title>11. 시스템</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter11/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter11/</guid>
        <description>11. 시스템 시스템 제작과 시스템 사용을 분리하라 제작과 사용은 다르다. 체계적이고 탄탄한 시스템을 만들고 싶다면 흔히</description>
      </item>
      
      <item>
        <title>12. 창발성</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter12/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter12/</guid>
        <description>12. 창발성 창발적 설계로 깔끔한 코드를 구현하자 켄트 벡이 제시한 단순한 설계 규칙 4가지 모든 테스트를 실행하라 무엇보</description>
      </item>
      
      <item>
        <title>13. 동시성</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter13/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter13/</guid>
        <description>13. 동시성 동시성이 필요한 이유? 동시성은 커플링(결합)을 없애는 전략이다, 즉 무엇과 언제를 분리하는 전략이다 단</description>
      </item>
      
      <item>
        <title>2. 의미 있는 이름</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter2/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter2/</guid>
        <description>2. 의미 있는 이름 의도를 분명히 밝혀라 로직이 간단한 것보단, 이름이 간단 명료한 것이 좋다. 그릇된 정보를 피하라 유사</description>
      </item>
      
      <item>
        <title>3. 함수</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter3/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter3/</guid>
        <description>3. 함수 작게 만들어라 중첩 구조가 생길만큼 함수가 커져서는 안된다는 뜻이다. 함수에서 들여쓰기 수준은 1단이나 2단</description>
      </item>
      
      <item>
        <title>4. 주석</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter4/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter4/</guid>
        <description>4. 주석 나쁜 코드에 주석을 달지 마라. 새로 짜라 주석은 나쁜 코드를 보완하지 못한다. 코드에 주석을 추가하는 일반적인</description>
      </item>
      
      <item>
        <title>5. 형식 맞추기</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter5/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter5/</guid>
        <description>5. 형식 맞추기 형식을 맞추는 목적 오늘 구현한 기능이 다음 버전에서 바뀔 확률은 매우 높다. 그리고 오늘 구현한 코드의 가</description>
      </item>
      
      <item>
        <title>6. 객체와 자료 구조</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter6/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter6/</guid>
        <description>6. 객체와 자료 구조 자료 추상화 자료를 세세하게 공개하기보다는 추상적인 개념으로 표현하는 것이 좋다. 인터페이스나</description>
      </item>
      
      <item>
        <title>7. 오류 처리</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter7/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter7/</guid>
        <description>7. 오류 처리 오류 코드보다 예외를 사용하라 오류 처리 코드와 호출하여 논리를 진행하는 코드가 섞이면 알아보기가 어렵다</description>
      </item>
      
      <item>
        <title>8. 경계</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter8/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter8/</guid>
        <description>8. 경계 외부 코드 사용하기 인터페이스 제공자와 인터페이스 사용자 사이에는 특유의 경계가 존재한다. 제공자는 사용성</description>
      </item>
      
      <item>
        <title>9. 단위 테스트</title>
        <link>https://ysjune.github.io/posts/clean-code/chapter9/</link>
        <pubDate>Sat, 07 Dec 2019 13:49:32 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/posts/clean-code/chapter9/</guid>
        <description>9. 단위 테스트 TDD 의 법칙 3가지 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다. 컴파일은 실패하지</description>
      </item>
      
      <item>
        <title>About</title>
        <link>https://ysjune.github.io/about/</link>
        <pubDate>Fri, 06 Dec 2019 16:14:03 +0900</pubDate>
        <author>windsyou@gmail.com (snack)</author>
        <guid>https://ysjune.github.io/about/</guid>
        <description>Hello! I&#39;m Snack. Web Programmer
Main Language is JAVA
I mainly do server programming through Spring and a little javascript
Nowadays, I&#39;m interested in javascript(typescript), good Domain Architect and Machine learning
I&#39;m lazy, But Slow and Steady :)</description>
      </item>
      
    
  </channel>
</rss>